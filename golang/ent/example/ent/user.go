// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"sqlent/ent/user"
	"sqlent/ent/usercount"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	// 用户自增id
	ID int64 `json:"id,omitempty"`
	// Phone holds the value of the "phone" field.
	// 用户电话
	Phone string `json:"phone,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// PID holds the value of the "p_id" field.
	PID int `json:"p_id,omitempty"`
	// InvitedCode holds the value of the "invited_code" field.
	InvitedCode string `json:"invited_code,omitempty"`
	// Created holds the value of the "created" field.
	Created int64 `json:"created,omitempty"`
	// Updated holds the value of the "updated" field.
	Updated int64 `json:"updated,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int64 `json:"deleted,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Count holds the value of the count edge.
	Count *UserCount `json:"count,omitempty"`
	// BuyRecord holds the value of the buy_record edge.
	BuyRecord []*UserBuyRecord `json:"buy_record,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CountOrErr returns the Count value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) CountOrErr() (*UserCount, error) {
	if e.loadedTypes[0] {
		if e.Count == nil {
			// The edge count was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: usercount.Label}
		}
		return e.Count, nil
	}
	return nil, &NotLoadedError{edge: "count"}
}

// BuyRecordOrErr returns the BuyRecord value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BuyRecordOrErr() ([]*UserBuyRecord, error) {
	if e.loadedTypes[1] {
		return e.BuyRecord, nil
	}
	return nil, &NotLoadedError{edge: "buy_record"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldPID, user.FieldCreated, user.FieldUpdated, user.FieldDeleted:
			values[i] = &sql.NullInt64{}
		case user.FieldPhone, user.FieldPassword, user.FieldInvitedCode:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int64(value.Int64)
		case user.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				u.Phone = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldPID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field p_id", values[i])
			} else if value.Valid {
				u.PID = int(value.Int64)
			}
		case user.FieldInvitedCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invited_code", values[i])
			} else if value.Valid {
				u.InvitedCode = value.String
			}
		case user.FieldCreated:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				u.Created = value.Int64
			}
		case user.FieldUpdated:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated", values[i])
			} else if value.Valid {
				u.Updated = value.Int64
			}
		case user.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				u.Deleted = value.Int64
			}
		}
	}
	return nil
}

// QueryCount queries the "count" edge of the User entity.
func (u *User) QueryCount() *UserCountQuery {
	return (&UserClient{config: u.config}).QueryCount(u)
}

// QueryBuyRecord queries the "buy_record" edge of the User entity.
func (u *User) QueryBuyRecord() *UserBuyRecordQuery {
	return (&UserClient{config: u.config}).QueryBuyRecord(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", phone=")
	builder.WriteString(u.Phone)
	builder.WriteString(", password=")
	builder.WriteString(u.Password)
	builder.WriteString(", p_id=")
	builder.WriteString(fmt.Sprintf("%v", u.PID))
	builder.WriteString(", invited_code=")
	builder.WriteString(u.InvitedCode)
	builder.WriteString(", created=")
	builder.WriteString(fmt.Sprintf("%v", u.Created))
	builder.WriteString(", updated=")
	builder.WriteString(fmt.Sprintf("%v", u.Updated))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", u.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
