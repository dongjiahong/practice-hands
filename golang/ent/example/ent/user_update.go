// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sqlent/ent/predicate"
	"sqlent/ent/user"
	"sqlent/ent/userbuyrecord"
	"sqlent/ent/usercount"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where adds a new predicate for the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.predicates = append(uu.mutation.predicates, ps...)
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetPID sets the "p_id" field.
func (uu *UserUpdate) SetPID(i int) *UserUpdate {
	uu.mutation.ResetPID()
	uu.mutation.SetPID(i)
	return uu
}

// SetNillablePID sets the "p_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePID(i *int) *UserUpdate {
	if i != nil {
		uu.SetPID(*i)
	}
	return uu
}

// AddPID adds i to the "p_id" field.
func (uu *UserUpdate) AddPID(i int) *UserUpdate {
	uu.mutation.AddPID(i)
	return uu
}

// SetInvitedCode sets the "invited_code" field.
func (uu *UserUpdate) SetInvitedCode(s string) *UserUpdate {
	uu.mutation.SetInvitedCode(s)
	return uu
}

// SetUpdated sets the "updated" field.
func (uu *UserUpdate) SetUpdated(i int64) *UserUpdate {
	uu.mutation.ResetUpdated()
	uu.mutation.SetUpdated(i)
	return uu
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdated(i *int64) *UserUpdate {
	if i != nil {
		uu.SetUpdated(*i)
	}
	return uu
}

// AddUpdated adds i to the "updated" field.
func (uu *UserUpdate) AddUpdated(i int64) *UserUpdate {
	uu.mutation.AddUpdated(i)
	return uu
}

// SetDeleted sets the "deleted" field.
func (uu *UserUpdate) SetDeleted(i int64) *UserUpdate {
	uu.mutation.ResetDeleted()
	uu.mutation.SetDeleted(i)
	return uu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeleted(i *int64) *UserUpdate {
	if i != nil {
		uu.SetDeleted(*i)
	}
	return uu
}

// AddDeleted adds i to the "deleted" field.
func (uu *UserUpdate) AddDeleted(i int64) *UserUpdate {
	uu.mutation.AddDeleted(i)
	return uu
}

// SetCountID sets the "count" edge to the UserCount entity by ID.
func (uu *UserUpdate) SetCountID(id int) *UserUpdate {
	uu.mutation.SetCountID(id)
	return uu
}

// SetNillableCountID sets the "count" edge to the UserCount entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableCountID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetCountID(*id)
	}
	return uu
}

// SetCount sets the "count" edge to the UserCount entity.
func (uu *UserUpdate) SetCount(u *UserCount) *UserUpdate {
	return uu.SetCountID(u.ID)
}

// AddBuyRecordIDs adds the "buy_record" edge to the UserBuyRecord entity by IDs.
func (uu *UserUpdate) AddBuyRecordIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddBuyRecordIDs(ids...)
	return uu
}

// AddBuyRecord adds the "buy_record" edges to the UserBuyRecord entity.
func (uu *UserUpdate) AddBuyRecord(u ...*UserBuyRecord) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddBuyRecordIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearCount clears the "count" edge to the UserCount entity.
func (uu *UserUpdate) ClearCount() *UserUpdate {
	uu.mutation.ClearCount()
	return uu
}

// ClearBuyRecord clears all "buy_record" edges to the UserBuyRecord entity.
func (uu *UserUpdate) ClearBuyRecord() *UserUpdate {
	uu.mutation.ClearBuyRecord()
	return uu
}

// RemoveBuyRecordIDs removes the "buy_record" edge to UserBuyRecord entities by IDs.
func (uu *UserUpdate) RemoveBuyRecordIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveBuyRecordIDs(ids...)
	return uu
}

// RemoveBuyRecord removes "buy_record" edges to UserBuyRecord entities.
func (uu *UserUpdate) RemoveBuyRecord(u ...*UserBuyRecord) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveBuyRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if v, ok := uu.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	if v, ok := uu.mutation.InvitedCode(); ok {
		if err := user.InvitedCodeValidator(v); err != nil {
			return &ValidationError{Name: "invited_code", err: fmt.Errorf("ent: validator failed for field \"invited_code\": %w", err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhone,
		})
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uu.mutation.PID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldPID,
		})
	}
	if value, ok := uu.mutation.AddedPID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldPID,
		})
	}
	if value, ok := uu.mutation.InvitedCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldInvitedCode,
		})
	}
	if value, ok := uu.mutation.Updated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldUpdated,
		})
	}
	if value, ok := uu.mutation.AddedUpdated(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldUpdated,
		})
	}
	if value, ok := uu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldDeleted,
		})
	}
	if value, ok := uu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldDeleted,
		})
	}
	if uu.mutation.CountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CountTable,
			Columns: []string{user.CountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CountTable,
			Columns: []string{user.CountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.BuyRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BuyRecordTable,
			Columns: []string{user.BuyRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userbuyrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedBuyRecordIDs(); len(nodes) > 0 && !uu.mutation.BuyRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BuyRecordTable,
			Columns: []string{user.BuyRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userbuyrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BuyRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BuyRecordTable,
			Columns: []string{user.BuyRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userbuyrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetPID sets the "p_id" field.
func (uuo *UserUpdateOne) SetPID(i int) *UserUpdateOne {
	uuo.mutation.ResetPID()
	uuo.mutation.SetPID(i)
	return uuo
}

// SetNillablePID sets the "p_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePID(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetPID(*i)
	}
	return uuo
}

// AddPID adds i to the "p_id" field.
func (uuo *UserUpdateOne) AddPID(i int) *UserUpdateOne {
	uuo.mutation.AddPID(i)
	return uuo
}

// SetInvitedCode sets the "invited_code" field.
func (uuo *UserUpdateOne) SetInvitedCode(s string) *UserUpdateOne {
	uuo.mutation.SetInvitedCode(s)
	return uuo
}

// SetUpdated sets the "updated" field.
func (uuo *UserUpdateOne) SetUpdated(i int64) *UserUpdateOne {
	uuo.mutation.ResetUpdated()
	uuo.mutation.SetUpdated(i)
	return uuo
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdated(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetUpdated(*i)
	}
	return uuo
}

// AddUpdated adds i to the "updated" field.
func (uuo *UserUpdateOne) AddUpdated(i int64) *UserUpdateOne {
	uuo.mutation.AddUpdated(i)
	return uuo
}

// SetDeleted sets the "deleted" field.
func (uuo *UserUpdateOne) SetDeleted(i int64) *UserUpdateOne {
	uuo.mutation.ResetDeleted()
	uuo.mutation.SetDeleted(i)
	return uuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeleted(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetDeleted(*i)
	}
	return uuo
}

// AddDeleted adds i to the "deleted" field.
func (uuo *UserUpdateOne) AddDeleted(i int64) *UserUpdateOne {
	uuo.mutation.AddDeleted(i)
	return uuo
}

// SetCountID sets the "count" edge to the UserCount entity by ID.
func (uuo *UserUpdateOne) SetCountID(id int) *UserUpdateOne {
	uuo.mutation.SetCountID(id)
	return uuo
}

// SetNillableCountID sets the "count" edge to the UserCount entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCountID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetCountID(*id)
	}
	return uuo
}

// SetCount sets the "count" edge to the UserCount entity.
func (uuo *UserUpdateOne) SetCount(u *UserCount) *UserUpdateOne {
	return uuo.SetCountID(u.ID)
}

// AddBuyRecordIDs adds the "buy_record" edge to the UserBuyRecord entity by IDs.
func (uuo *UserUpdateOne) AddBuyRecordIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddBuyRecordIDs(ids...)
	return uuo
}

// AddBuyRecord adds the "buy_record" edges to the UserBuyRecord entity.
func (uuo *UserUpdateOne) AddBuyRecord(u ...*UserBuyRecord) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddBuyRecordIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearCount clears the "count" edge to the UserCount entity.
func (uuo *UserUpdateOne) ClearCount() *UserUpdateOne {
	uuo.mutation.ClearCount()
	return uuo
}

// ClearBuyRecord clears all "buy_record" edges to the UserBuyRecord entity.
func (uuo *UserUpdateOne) ClearBuyRecord() *UserUpdateOne {
	uuo.mutation.ClearBuyRecord()
	return uuo
}

// RemoveBuyRecordIDs removes the "buy_record" edge to UserBuyRecord entities by IDs.
func (uuo *UserUpdateOne) RemoveBuyRecordIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveBuyRecordIDs(ids...)
	return uuo
}

// RemoveBuyRecord removes "buy_record" edges to UserBuyRecord entities.
func (uuo *UserUpdateOne) RemoveBuyRecord(u ...*UserBuyRecord) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveBuyRecordIDs(ids...)
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.InvitedCode(); ok {
		if err := user.InvitedCodeValidator(v); err != nil {
			return &ValidationError{Name: "invited_code", err: fmt.Errorf("ent: validator failed for field \"invited_code\": %w", err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing User.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhone,
		})
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uuo.mutation.PID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldPID,
		})
	}
	if value, ok := uuo.mutation.AddedPID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldPID,
		})
	}
	if value, ok := uuo.mutation.InvitedCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldInvitedCode,
		})
	}
	if value, ok := uuo.mutation.Updated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldUpdated,
		})
	}
	if value, ok := uuo.mutation.AddedUpdated(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldUpdated,
		})
	}
	if value, ok := uuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldDeleted,
		})
	}
	if value, ok := uuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldDeleted,
		})
	}
	if uuo.mutation.CountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CountTable,
			Columns: []string{user.CountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CountTable,
			Columns: []string{user.CountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usercount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.BuyRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BuyRecordTable,
			Columns: []string{user.BuyRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userbuyrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedBuyRecordIDs(); len(nodes) > 0 && !uuo.mutation.BuyRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BuyRecordTable,
			Columns: []string{user.BuyRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userbuyrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BuyRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BuyRecordTable,
			Columns: []string{user.BuyRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: userbuyrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
