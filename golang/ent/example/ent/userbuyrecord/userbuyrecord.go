// Code generated by entc, DO NOT EDIT.

package userbuyrecord

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the userbuyrecord type in the database.
	Label = "user_buy_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPower holds the string denoting the power field in the database.
	FieldPower = "power"
	// FieldPowerNum holds the string denoting the power_num field in the database.
	FieldPowerNum = "power_num"
	// FieldTotalPower holds the string denoting the total_power field in the database.
	FieldTotalPower = "total_power"
	// FieldTotalDay holds the string denoting the total_day field in the database.
	FieldTotalDay = "total_day"
	// FieldRemainDay holds the string denoting the remain_day field in the database.
	FieldRemainDay = "remain_day"
	// FieldNode holds the string denoting the node field in the database.
	FieldNode = "node"
	// FieldUsedUsdt holds the string denoting the used_usdt field in the database.
	FieldUsedUsdt = "used_usdt"
	// FieldBuyDate holds the string denoting the buy_date field in the database.
	FieldBuyDate = "buy_date"
	// FieldCreated holds the string denoting the created field in the database.
	FieldCreated = "created"
	// FieldUpdated holds the string denoting the updated field in the database.
	FieldUpdated = "updated"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the userbuyrecord in the database.
	Table = "user_buy_records"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "user_buy_records"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_id"
)

// Columns holds all SQL columns for userbuyrecord fields.
var Columns = []string{
	FieldID,
	FieldPower,
	FieldPowerNum,
	FieldTotalPower,
	FieldTotalDay,
	FieldRemainDay,
	FieldNode,
	FieldUsedUsdt,
	FieldBuyDate,
	FieldCreated,
	FieldUpdated,
	FieldDeleted,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_buy_records"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPower holds the default value on creation for the "power" field.
	DefaultPower int
	// DefaultPowerNum holds the default value on creation for the "power_num" field.
	DefaultPowerNum int
	// PowerNumValidator is a validator for the "power_num" field. It is called by the builders before save.
	PowerNumValidator func(int) error
	// TotalDayValidator is a validator for the "total_day" field. It is called by the builders before save.
	TotalDayValidator func(int) error
	// RemainDayValidator is a validator for the "remain_day" field. It is called by the builders before save.
	RemainDayValidator func(int) error
	// NodeValidator is a validator for the "node" field. It is called by the builders before save.
	NodeValidator func(string) error
	// BuyDateValidator is a validator for the "buy_date" field. It is called by the builders before save.
	BuyDateValidator func(string) error
	// DefaultCreated holds the default value on creation for the "created" field.
	DefaultCreated int64
	// DefaultUpdated holds the default value on creation for the "updated" field.
	DefaultUpdated int64
	// DefaultDeleted holds the default value on creation for the "deleted" field.
	DefaultDeleted int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
