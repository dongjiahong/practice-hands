// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sqlent/ent/user"
	"sqlent/ent/userbuyrecord"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserBuyRecordCreate is the builder for creating a UserBuyRecord entity.
type UserBuyRecordCreate struct {
	config
	mutation *UserBuyRecordMutation
	hooks    []Hook
}

// SetPower sets the "power" field.
func (ubrc *UserBuyRecordCreate) SetPower(i int) *UserBuyRecordCreate {
	ubrc.mutation.SetPower(i)
	return ubrc
}

// SetNillablePower sets the "power" field if the given value is not nil.
func (ubrc *UserBuyRecordCreate) SetNillablePower(i *int) *UserBuyRecordCreate {
	if i != nil {
		ubrc.SetPower(*i)
	}
	return ubrc
}

// SetPowerNum sets the "power_num" field.
func (ubrc *UserBuyRecordCreate) SetPowerNum(i int) *UserBuyRecordCreate {
	ubrc.mutation.SetPowerNum(i)
	return ubrc
}

// SetNillablePowerNum sets the "power_num" field if the given value is not nil.
func (ubrc *UserBuyRecordCreate) SetNillablePowerNum(i *int) *UserBuyRecordCreate {
	if i != nil {
		ubrc.SetPowerNum(*i)
	}
	return ubrc
}

// SetTotalPower sets the "total_power" field.
func (ubrc *UserBuyRecordCreate) SetTotalPower(f float64) *UserBuyRecordCreate {
	ubrc.mutation.SetTotalPower(f)
	return ubrc
}

// SetTotalDay sets the "total_day" field.
func (ubrc *UserBuyRecordCreate) SetTotalDay(i int) *UserBuyRecordCreate {
	ubrc.mutation.SetTotalDay(i)
	return ubrc
}

// SetRemainDay sets the "remain_day" field.
func (ubrc *UserBuyRecordCreate) SetRemainDay(i int) *UserBuyRecordCreate {
	ubrc.mutation.SetRemainDay(i)
	return ubrc
}

// SetNode sets the "node" field.
func (ubrc *UserBuyRecordCreate) SetNode(s string) *UserBuyRecordCreate {
	ubrc.mutation.SetNode(s)
	return ubrc
}

// SetUsedUsdt sets the "used_usdt" field.
func (ubrc *UserBuyRecordCreate) SetUsedUsdt(f float64) *UserBuyRecordCreate {
	ubrc.mutation.SetUsedUsdt(f)
	return ubrc
}

// SetBuyDate sets the "buy_date" field.
func (ubrc *UserBuyRecordCreate) SetBuyDate(s string) *UserBuyRecordCreate {
	ubrc.mutation.SetBuyDate(s)
	return ubrc
}

// SetCreated sets the "created" field.
func (ubrc *UserBuyRecordCreate) SetCreated(i int64) *UserBuyRecordCreate {
	ubrc.mutation.SetCreated(i)
	return ubrc
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (ubrc *UserBuyRecordCreate) SetNillableCreated(i *int64) *UserBuyRecordCreate {
	if i != nil {
		ubrc.SetCreated(*i)
	}
	return ubrc
}

// SetUpdated sets the "updated" field.
func (ubrc *UserBuyRecordCreate) SetUpdated(i int64) *UserBuyRecordCreate {
	ubrc.mutation.SetUpdated(i)
	return ubrc
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (ubrc *UserBuyRecordCreate) SetNillableUpdated(i *int64) *UserBuyRecordCreate {
	if i != nil {
		ubrc.SetUpdated(*i)
	}
	return ubrc
}

// SetDeleted sets the "deleted" field.
func (ubrc *UserBuyRecordCreate) SetDeleted(i int64) *UserBuyRecordCreate {
	ubrc.mutation.SetDeleted(i)
	return ubrc
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (ubrc *UserBuyRecordCreate) SetNillableDeleted(i *int64) *UserBuyRecordCreate {
	if i != nil {
		ubrc.SetDeleted(*i)
	}
	return ubrc
}

// SetID sets the "id" field.
func (ubrc *UserBuyRecordCreate) SetID(u uuid.UUID) *UserBuyRecordCreate {
	ubrc.mutation.SetID(u)
	return ubrc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ubrc *UserBuyRecordCreate) SetOwnerID(id int64) *UserBuyRecordCreate {
	ubrc.mutation.SetOwnerID(id)
	return ubrc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ubrc *UserBuyRecordCreate) SetNillableOwnerID(id *int64) *UserBuyRecordCreate {
	if id != nil {
		ubrc = ubrc.SetOwnerID(*id)
	}
	return ubrc
}

// SetOwner sets the "owner" edge to the User entity.
func (ubrc *UserBuyRecordCreate) SetOwner(u *User) *UserBuyRecordCreate {
	return ubrc.SetOwnerID(u.ID)
}

// Mutation returns the UserBuyRecordMutation object of the builder.
func (ubrc *UserBuyRecordCreate) Mutation() *UserBuyRecordMutation {
	return ubrc.mutation
}

// Save creates the UserBuyRecord in the database.
func (ubrc *UserBuyRecordCreate) Save(ctx context.Context) (*UserBuyRecord, error) {
	var (
		err  error
		node *UserBuyRecord
	)
	ubrc.defaults()
	if len(ubrc.hooks) == 0 {
		if err = ubrc.check(); err != nil {
			return nil, err
		}
		node, err = ubrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserBuyRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ubrc.check(); err != nil {
				return nil, err
			}
			ubrc.mutation = mutation
			node, err = ubrc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ubrc.hooks) - 1; i >= 0; i-- {
			mut = ubrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ubrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ubrc *UserBuyRecordCreate) SaveX(ctx context.Context) *UserBuyRecord {
	v, err := ubrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ubrc *UserBuyRecordCreate) defaults() {
	if _, ok := ubrc.mutation.Power(); !ok {
		v := userbuyrecord.DefaultPower
		ubrc.mutation.SetPower(v)
	}
	if _, ok := ubrc.mutation.PowerNum(); !ok {
		v := userbuyrecord.DefaultPowerNum
		ubrc.mutation.SetPowerNum(v)
	}
	if _, ok := ubrc.mutation.Created(); !ok {
		v := userbuyrecord.DefaultCreated
		ubrc.mutation.SetCreated(v)
	}
	if _, ok := ubrc.mutation.Updated(); !ok {
		v := userbuyrecord.DefaultUpdated
		ubrc.mutation.SetUpdated(v)
	}
	if _, ok := ubrc.mutation.Deleted(); !ok {
		v := userbuyrecord.DefaultDeleted
		ubrc.mutation.SetDeleted(v)
	}
	if _, ok := ubrc.mutation.ID(); !ok {
		v := userbuyrecord.DefaultID()
		ubrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubrc *UserBuyRecordCreate) check() error {
	if _, ok := ubrc.mutation.Power(); !ok {
		return &ValidationError{Name: "power", err: errors.New("ent: missing required field \"power\"")}
	}
	if _, ok := ubrc.mutation.PowerNum(); !ok {
		return &ValidationError{Name: "power_num", err: errors.New("ent: missing required field \"power_num\"")}
	}
	if v, ok := ubrc.mutation.PowerNum(); ok {
		if err := userbuyrecord.PowerNumValidator(v); err != nil {
			return &ValidationError{Name: "power_num", err: fmt.Errorf("ent: validator failed for field \"power_num\": %w", err)}
		}
	}
	if _, ok := ubrc.mutation.TotalPower(); !ok {
		return &ValidationError{Name: "total_power", err: errors.New("ent: missing required field \"total_power\"")}
	}
	if _, ok := ubrc.mutation.TotalDay(); !ok {
		return &ValidationError{Name: "total_day", err: errors.New("ent: missing required field \"total_day\"")}
	}
	if v, ok := ubrc.mutation.TotalDay(); ok {
		if err := userbuyrecord.TotalDayValidator(v); err != nil {
			return &ValidationError{Name: "total_day", err: fmt.Errorf("ent: validator failed for field \"total_day\": %w", err)}
		}
	}
	if _, ok := ubrc.mutation.RemainDay(); !ok {
		return &ValidationError{Name: "remain_day", err: errors.New("ent: missing required field \"remain_day\"")}
	}
	if v, ok := ubrc.mutation.RemainDay(); ok {
		if err := userbuyrecord.RemainDayValidator(v); err != nil {
			return &ValidationError{Name: "remain_day", err: fmt.Errorf("ent: validator failed for field \"remain_day\": %w", err)}
		}
	}
	if _, ok := ubrc.mutation.Node(); !ok {
		return &ValidationError{Name: "node", err: errors.New("ent: missing required field \"node\"")}
	}
	if v, ok := ubrc.mutation.Node(); ok {
		if err := userbuyrecord.NodeValidator(v); err != nil {
			return &ValidationError{Name: "node", err: fmt.Errorf("ent: validator failed for field \"node\": %w", err)}
		}
	}
	if _, ok := ubrc.mutation.UsedUsdt(); !ok {
		return &ValidationError{Name: "used_usdt", err: errors.New("ent: missing required field \"used_usdt\"")}
	}
	if _, ok := ubrc.mutation.BuyDate(); !ok {
		return &ValidationError{Name: "buy_date", err: errors.New("ent: missing required field \"buy_date\"")}
	}
	if v, ok := ubrc.mutation.BuyDate(); ok {
		if err := userbuyrecord.BuyDateValidator(v); err != nil {
			return &ValidationError{Name: "buy_date", err: fmt.Errorf("ent: validator failed for field \"buy_date\": %w", err)}
		}
	}
	if _, ok := ubrc.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New("ent: missing required field \"created\"")}
	}
	if _, ok := ubrc.mutation.Updated(); !ok {
		return &ValidationError{Name: "updated", err: errors.New("ent: missing required field \"updated\"")}
	}
	if _, ok := ubrc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (ubrc *UserBuyRecordCreate) sqlSave(ctx context.Context) (*UserBuyRecord, error) {
	_node, _spec := ubrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ubrc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (ubrc *UserBuyRecordCreate) createSpec() (*UserBuyRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &UserBuyRecord{config: ubrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userbuyrecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userbuyrecord.FieldID,
			},
		}
	)
	if id, ok := ubrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ubrc.mutation.Power(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldPower,
		})
		_node.Power = value
	}
	if value, ok := ubrc.mutation.PowerNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldPowerNum,
		})
		_node.PowerNum = value
	}
	if value, ok := ubrc.mutation.TotalPower(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbuyrecord.FieldTotalPower,
		})
		_node.TotalPower = value
	}
	if value, ok := ubrc.mutation.TotalDay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldTotalDay,
		})
		_node.TotalDay = value
	}
	if value, ok := ubrc.mutation.RemainDay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldRemainDay,
		})
		_node.RemainDay = value
	}
	if value, ok := ubrc.mutation.Node(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbuyrecord.FieldNode,
		})
		_node.Node = value
	}
	if value, ok := ubrc.mutation.UsedUsdt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbuyrecord.FieldUsedUsdt,
		})
		_node.UsedUsdt = value
	}
	if value, ok := ubrc.mutation.BuyDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbuyrecord.FieldBuyDate,
		})
		_node.BuyDate = value
	}
	if value, ok := ubrc.mutation.Created(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userbuyrecord.FieldCreated,
		})
		_node.Created = value
	}
	if value, ok := ubrc.mutation.Updated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userbuyrecord.FieldUpdated,
		})
		_node.Updated = value
	}
	if value, ok := ubrc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userbuyrecord.FieldDeleted,
		})
		_node.Deleted = value
	}
	if nodes := ubrc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbuyrecord.OwnerTable,
			Columns: []string{userbuyrecord.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserBuyRecordCreateBulk is the builder for creating many UserBuyRecord entities in bulk.
type UserBuyRecordCreateBulk struct {
	config
	builders []*UserBuyRecordCreate
}

// Save creates the UserBuyRecord entities in the database.
func (ubrcb *UserBuyRecordCreateBulk) Save(ctx context.Context) ([]*UserBuyRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ubrcb.builders))
	nodes := make([]*UserBuyRecord, len(ubrcb.builders))
	mutators := make([]Mutator, len(ubrcb.builders))
	for i := range ubrcb.builders {
		func(i int, root context.Context) {
			builder := ubrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserBuyRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ubrcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ubrcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ubrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ubrcb *UserBuyRecordCreateBulk) SaveX(ctx context.Context) []*UserBuyRecord {
	v, err := ubrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
