// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sqlent/ent/predicate"
	"sqlent/ent/user"
	"sqlent/ent/userbuyrecord"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserBuyRecordUpdate is the builder for updating UserBuyRecord entities.
type UserBuyRecordUpdate struct {
	config
	hooks    []Hook
	mutation *UserBuyRecordMutation
}

// Where adds a new predicate for the UserBuyRecordUpdate builder.
func (ubru *UserBuyRecordUpdate) Where(ps ...predicate.UserBuyRecord) *UserBuyRecordUpdate {
	ubru.mutation.predicates = append(ubru.mutation.predicates, ps...)
	return ubru
}

// SetPower sets the "power" field.
func (ubru *UserBuyRecordUpdate) SetPower(i int) *UserBuyRecordUpdate {
	ubru.mutation.ResetPower()
	ubru.mutation.SetPower(i)
	return ubru
}

// SetNillablePower sets the "power" field if the given value is not nil.
func (ubru *UserBuyRecordUpdate) SetNillablePower(i *int) *UserBuyRecordUpdate {
	if i != nil {
		ubru.SetPower(*i)
	}
	return ubru
}

// AddPower adds i to the "power" field.
func (ubru *UserBuyRecordUpdate) AddPower(i int) *UserBuyRecordUpdate {
	ubru.mutation.AddPower(i)
	return ubru
}

// SetPowerNum sets the "power_num" field.
func (ubru *UserBuyRecordUpdate) SetPowerNum(i int) *UserBuyRecordUpdate {
	ubru.mutation.ResetPowerNum()
	ubru.mutation.SetPowerNum(i)
	return ubru
}

// SetNillablePowerNum sets the "power_num" field if the given value is not nil.
func (ubru *UserBuyRecordUpdate) SetNillablePowerNum(i *int) *UserBuyRecordUpdate {
	if i != nil {
		ubru.SetPowerNum(*i)
	}
	return ubru
}

// AddPowerNum adds i to the "power_num" field.
func (ubru *UserBuyRecordUpdate) AddPowerNum(i int) *UserBuyRecordUpdate {
	ubru.mutation.AddPowerNum(i)
	return ubru
}

// SetTotalPower sets the "total_power" field.
func (ubru *UserBuyRecordUpdate) SetTotalPower(f float64) *UserBuyRecordUpdate {
	ubru.mutation.ResetTotalPower()
	ubru.mutation.SetTotalPower(f)
	return ubru
}

// AddTotalPower adds f to the "total_power" field.
func (ubru *UserBuyRecordUpdate) AddTotalPower(f float64) *UserBuyRecordUpdate {
	ubru.mutation.AddTotalPower(f)
	return ubru
}

// SetTotalDay sets the "total_day" field.
func (ubru *UserBuyRecordUpdate) SetTotalDay(i int) *UserBuyRecordUpdate {
	ubru.mutation.ResetTotalDay()
	ubru.mutation.SetTotalDay(i)
	return ubru
}

// AddTotalDay adds i to the "total_day" field.
func (ubru *UserBuyRecordUpdate) AddTotalDay(i int) *UserBuyRecordUpdate {
	ubru.mutation.AddTotalDay(i)
	return ubru
}

// SetRemainDay sets the "remain_day" field.
func (ubru *UserBuyRecordUpdate) SetRemainDay(i int) *UserBuyRecordUpdate {
	ubru.mutation.ResetRemainDay()
	ubru.mutation.SetRemainDay(i)
	return ubru
}

// AddRemainDay adds i to the "remain_day" field.
func (ubru *UserBuyRecordUpdate) AddRemainDay(i int) *UserBuyRecordUpdate {
	ubru.mutation.AddRemainDay(i)
	return ubru
}

// SetNode sets the "node" field.
func (ubru *UserBuyRecordUpdate) SetNode(s string) *UserBuyRecordUpdate {
	ubru.mutation.SetNode(s)
	return ubru
}

// SetUsedUsdt sets the "used_usdt" field.
func (ubru *UserBuyRecordUpdate) SetUsedUsdt(f float64) *UserBuyRecordUpdate {
	ubru.mutation.ResetUsedUsdt()
	ubru.mutation.SetUsedUsdt(f)
	return ubru
}

// AddUsedUsdt adds f to the "used_usdt" field.
func (ubru *UserBuyRecordUpdate) AddUsedUsdt(f float64) *UserBuyRecordUpdate {
	ubru.mutation.AddUsedUsdt(f)
	return ubru
}

// SetBuyDate sets the "buy_date" field.
func (ubru *UserBuyRecordUpdate) SetBuyDate(s string) *UserBuyRecordUpdate {
	ubru.mutation.SetBuyDate(s)
	return ubru
}

// SetUpdated sets the "updated" field.
func (ubru *UserBuyRecordUpdate) SetUpdated(i int64) *UserBuyRecordUpdate {
	ubru.mutation.ResetUpdated()
	ubru.mutation.SetUpdated(i)
	return ubru
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (ubru *UserBuyRecordUpdate) SetNillableUpdated(i *int64) *UserBuyRecordUpdate {
	if i != nil {
		ubru.SetUpdated(*i)
	}
	return ubru
}

// AddUpdated adds i to the "updated" field.
func (ubru *UserBuyRecordUpdate) AddUpdated(i int64) *UserBuyRecordUpdate {
	ubru.mutation.AddUpdated(i)
	return ubru
}

// SetDeleted sets the "deleted" field.
func (ubru *UserBuyRecordUpdate) SetDeleted(i int64) *UserBuyRecordUpdate {
	ubru.mutation.ResetDeleted()
	ubru.mutation.SetDeleted(i)
	return ubru
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (ubru *UserBuyRecordUpdate) SetNillableDeleted(i *int64) *UserBuyRecordUpdate {
	if i != nil {
		ubru.SetDeleted(*i)
	}
	return ubru
}

// AddDeleted adds i to the "deleted" field.
func (ubru *UserBuyRecordUpdate) AddDeleted(i int64) *UserBuyRecordUpdate {
	ubru.mutation.AddDeleted(i)
	return ubru
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ubru *UserBuyRecordUpdate) SetOwnerID(id int64) *UserBuyRecordUpdate {
	ubru.mutation.SetOwnerID(id)
	return ubru
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ubru *UserBuyRecordUpdate) SetNillableOwnerID(id *int64) *UserBuyRecordUpdate {
	if id != nil {
		ubru = ubru.SetOwnerID(*id)
	}
	return ubru
}

// SetOwner sets the "owner" edge to the User entity.
func (ubru *UserBuyRecordUpdate) SetOwner(u *User) *UserBuyRecordUpdate {
	return ubru.SetOwnerID(u.ID)
}

// Mutation returns the UserBuyRecordMutation object of the builder.
func (ubru *UserBuyRecordUpdate) Mutation() *UserBuyRecordMutation {
	return ubru.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ubru *UserBuyRecordUpdate) ClearOwner() *UserBuyRecordUpdate {
	ubru.mutation.ClearOwner()
	return ubru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ubru *UserBuyRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ubru.hooks) == 0 {
		if err = ubru.check(); err != nil {
			return 0, err
		}
		affected, err = ubru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserBuyRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ubru.check(); err != nil {
				return 0, err
			}
			ubru.mutation = mutation
			affected, err = ubru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ubru.hooks) - 1; i >= 0; i-- {
			mut = ubru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ubru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ubru *UserBuyRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := ubru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ubru *UserBuyRecordUpdate) Exec(ctx context.Context) error {
	_, err := ubru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubru *UserBuyRecordUpdate) ExecX(ctx context.Context) {
	if err := ubru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubru *UserBuyRecordUpdate) check() error {
	if v, ok := ubru.mutation.PowerNum(); ok {
		if err := userbuyrecord.PowerNumValidator(v); err != nil {
			return &ValidationError{Name: "power_num", err: fmt.Errorf("ent: validator failed for field \"power_num\": %w", err)}
		}
	}
	if v, ok := ubru.mutation.TotalDay(); ok {
		if err := userbuyrecord.TotalDayValidator(v); err != nil {
			return &ValidationError{Name: "total_day", err: fmt.Errorf("ent: validator failed for field \"total_day\": %w", err)}
		}
	}
	if v, ok := ubru.mutation.RemainDay(); ok {
		if err := userbuyrecord.RemainDayValidator(v); err != nil {
			return &ValidationError{Name: "remain_day", err: fmt.Errorf("ent: validator failed for field \"remain_day\": %w", err)}
		}
	}
	if v, ok := ubru.mutation.Node(); ok {
		if err := userbuyrecord.NodeValidator(v); err != nil {
			return &ValidationError{Name: "node", err: fmt.Errorf("ent: validator failed for field \"node\": %w", err)}
		}
	}
	if v, ok := ubru.mutation.BuyDate(); ok {
		if err := userbuyrecord.BuyDateValidator(v); err != nil {
			return &ValidationError{Name: "buy_date", err: fmt.Errorf("ent: validator failed for field \"buy_date\": %w", err)}
		}
	}
	return nil
}

func (ubru *UserBuyRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userbuyrecord.Table,
			Columns: userbuyrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userbuyrecord.FieldID,
			},
		},
	}
	if ps := ubru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ubru.mutation.Power(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldPower,
		})
	}
	if value, ok := ubru.mutation.AddedPower(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldPower,
		})
	}
	if value, ok := ubru.mutation.PowerNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldPowerNum,
		})
	}
	if value, ok := ubru.mutation.AddedPowerNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldPowerNum,
		})
	}
	if value, ok := ubru.mutation.TotalPower(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbuyrecord.FieldTotalPower,
		})
	}
	if value, ok := ubru.mutation.AddedTotalPower(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbuyrecord.FieldTotalPower,
		})
	}
	if value, ok := ubru.mutation.TotalDay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldTotalDay,
		})
	}
	if value, ok := ubru.mutation.AddedTotalDay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldTotalDay,
		})
	}
	if value, ok := ubru.mutation.RemainDay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldRemainDay,
		})
	}
	if value, ok := ubru.mutation.AddedRemainDay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldRemainDay,
		})
	}
	if value, ok := ubru.mutation.Node(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbuyrecord.FieldNode,
		})
	}
	if value, ok := ubru.mutation.UsedUsdt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbuyrecord.FieldUsedUsdt,
		})
	}
	if value, ok := ubru.mutation.AddedUsedUsdt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbuyrecord.FieldUsedUsdt,
		})
	}
	if value, ok := ubru.mutation.BuyDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbuyrecord.FieldBuyDate,
		})
	}
	if value, ok := ubru.mutation.Updated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userbuyrecord.FieldUpdated,
		})
	}
	if value, ok := ubru.mutation.AddedUpdated(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userbuyrecord.FieldUpdated,
		})
	}
	if value, ok := ubru.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userbuyrecord.FieldDeleted,
		})
	}
	if value, ok := ubru.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userbuyrecord.FieldDeleted,
		})
	}
	if ubru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbuyrecord.OwnerTable,
			Columns: []string{userbuyrecord.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ubru.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbuyrecord.OwnerTable,
			Columns: []string{userbuyrecord.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ubru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userbuyrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserBuyRecordUpdateOne is the builder for updating a single UserBuyRecord entity.
type UserBuyRecordUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserBuyRecordMutation
}

// SetPower sets the "power" field.
func (ubruo *UserBuyRecordUpdateOne) SetPower(i int) *UserBuyRecordUpdateOne {
	ubruo.mutation.ResetPower()
	ubruo.mutation.SetPower(i)
	return ubruo
}

// SetNillablePower sets the "power" field if the given value is not nil.
func (ubruo *UserBuyRecordUpdateOne) SetNillablePower(i *int) *UserBuyRecordUpdateOne {
	if i != nil {
		ubruo.SetPower(*i)
	}
	return ubruo
}

// AddPower adds i to the "power" field.
func (ubruo *UserBuyRecordUpdateOne) AddPower(i int) *UserBuyRecordUpdateOne {
	ubruo.mutation.AddPower(i)
	return ubruo
}

// SetPowerNum sets the "power_num" field.
func (ubruo *UserBuyRecordUpdateOne) SetPowerNum(i int) *UserBuyRecordUpdateOne {
	ubruo.mutation.ResetPowerNum()
	ubruo.mutation.SetPowerNum(i)
	return ubruo
}

// SetNillablePowerNum sets the "power_num" field if the given value is not nil.
func (ubruo *UserBuyRecordUpdateOne) SetNillablePowerNum(i *int) *UserBuyRecordUpdateOne {
	if i != nil {
		ubruo.SetPowerNum(*i)
	}
	return ubruo
}

// AddPowerNum adds i to the "power_num" field.
func (ubruo *UserBuyRecordUpdateOne) AddPowerNum(i int) *UserBuyRecordUpdateOne {
	ubruo.mutation.AddPowerNum(i)
	return ubruo
}

// SetTotalPower sets the "total_power" field.
func (ubruo *UserBuyRecordUpdateOne) SetTotalPower(f float64) *UserBuyRecordUpdateOne {
	ubruo.mutation.ResetTotalPower()
	ubruo.mutation.SetTotalPower(f)
	return ubruo
}

// AddTotalPower adds f to the "total_power" field.
func (ubruo *UserBuyRecordUpdateOne) AddTotalPower(f float64) *UserBuyRecordUpdateOne {
	ubruo.mutation.AddTotalPower(f)
	return ubruo
}

// SetTotalDay sets the "total_day" field.
func (ubruo *UserBuyRecordUpdateOne) SetTotalDay(i int) *UserBuyRecordUpdateOne {
	ubruo.mutation.ResetTotalDay()
	ubruo.mutation.SetTotalDay(i)
	return ubruo
}

// AddTotalDay adds i to the "total_day" field.
func (ubruo *UserBuyRecordUpdateOne) AddTotalDay(i int) *UserBuyRecordUpdateOne {
	ubruo.mutation.AddTotalDay(i)
	return ubruo
}

// SetRemainDay sets the "remain_day" field.
func (ubruo *UserBuyRecordUpdateOne) SetRemainDay(i int) *UserBuyRecordUpdateOne {
	ubruo.mutation.ResetRemainDay()
	ubruo.mutation.SetRemainDay(i)
	return ubruo
}

// AddRemainDay adds i to the "remain_day" field.
func (ubruo *UserBuyRecordUpdateOne) AddRemainDay(i int) *UserBuyRecordUpdateOne {
	ubruo.mutation.AddRemainDay(i)
	return ubruo
}

// SetNode sets the "node" field.
func (ubruo *UserBuyRecordUpdateOne) SetNode(s string) *UserBuyRecordUpdateOne {
	ubruo.mutation.SetNode(s)
	return ubruo
}

// SetUsedUsdt sets the "used_usdt" field.
func (ubruo *UserBuyRecordUpdateOne) SetUsedUsdt(f float64) *UserBuyRecordUpdateOne {
	ubruo.mutation.ResetUsedUsdt()
	ubruo.mutation.SetUsedUsdt(f)
	return ubruo
}

// AddUsedUsdt adds f to the "used_usdt" field.
func (ubruo *UserBuyRecordUpdateOne) AddUsedUsdt(f float64) *UserBuyRecordUpdateOne {
	ubruo.mutation.AddUsedUsdt(f)
	return ubruo
}

// SetBuyDate sets the "buy_date" field.
func (ubruo *UserBuyRecordUpdateOne) SetBuyDate(s string) *UserBuyRecordUpdateOne {
	ubruo.mutation.SetBuyDate(s)
	return ubruo
}

// SetUpdated sets the "updated" field.
func (ubruo *UserBuyRecordUpdateOne) SetUpdated(i int64) *UserBuyRecordUpdateOne {
	ubruo.mutation.ResetUpdated()
	ubruo.mutation.SetUpdated(i)
	return ubruo
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (ubruo *UserBuyRecordUpdateOne) SetNillableUpdated(i *int64) *UserBuyRecordUpdateOne {
	if i != nil {
		ubruo.SetUpdated(*i)
	}
	return ubruo
}

// AddUpdated adds i to the "updated" field.
func (ubruo *UserBuyRecordUpdateOne) AddUpdated(i int64) *UserBuyRecordUpdateOne {
	ubruo.mutation.AddUpdated(i)
	return ubruo
}

// SetDeleted sets the "deleted" field.
func (ubruo *UserBuyRecordUpdateOne) SetDeleted(i int64) *UserBuyRecordUpdateOne {
	ubruo.mutation.ResetDeleted()
	ubruo.mutation.SetDeleted(i)
	return ubruo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (ubruo *UserBuyRecordUpdateOne) SetNillableDeleted(i *int64) *UserBuyRecordUpdateOne {
	if i != nil {
		ubruo.SetDeleted(*i)
	}
	return ubruo
}

// AddDeleted adds i to the "deleted" field.
func (ubruo *UserBuyRecordUpdateOne) AddDeleted(i int64) *UserBuyRecordUpdateOne {
	ubruo.mutation.AddDeleted(i)
	return ubruo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ubruo *UserBuyRecordUpdateOne) SetOwnerID(id int64) *UserBuyRecordUpdateOne {
	ubruo.mutation.SetOwnerID(id)
	return ubruo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ubruo *UserBuyRecordUpdateOne) SetNillableOwnerID(id *int64) *UserBuyRecordUpdateOne {
	if id != nil {
		ubruo = ubruo.SetOwnerID(*id)
	}
	return ubruo
}

// SetOwner sets the "owner" edge to the User entity.
func (ubruo *UserBuyRecordUpdateOne) SetOwner(u *User) *UserBuyRecordUpdateOne {
	return ubruo.SetOwnerID(u.ID)
}

// Mutation returns the UserBuyRecordMutation object of the builder.
func (ubruo *UserBuyRecordUpdateOne) Mutation() *UserBuyRecordMutation {
	return ubruo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ubruo *UserBuyRecordUpdateOne) ClearOwner() *UserBuyRecordUpdateOne {
	ubruo.mutation.ClearOwner()
	return ubruo
}

// Save executes the query and returns the updated UserBuyRecord entity.
func (ubruo *UserBuyRecordUpdateOne) Save(ctx context.Context) (*UserBuyRecord, error) {
	var (
		err  error
		node *UserBuyRecord
	)
	if len(ubruo.hooks) == 0 {
		if err = ubruo.check(); err != nil {
			return nil, err
		}
		node, err = ubruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserBuyRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ubruo.check(); err != nil {
				return nil, err
			}
			ubruo.mutation = mutation
			node, err = ubruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ubruo.hooks) - 1; i >= 0; i-- {
			mut = ubruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ubruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ubruo *UserBuyRecordUpdateOne) SaveX(ctx context.Context) *UserBuyRecord {
	node, err := ubruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ubruo *UserBuyRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := ubruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubruo *UserBuyRecordUpdateOne) ExecX(ctx context.Context) {
	if err := ubruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubruo *UserBuyRecordUpdateOne) check() error {
	if v, ok := ubruo.mutation.PowerNum(); ok {
		if err := userbuyrecord.PowerNumValidator(v); err != nil {
			return &ValidationError{Name: "power_num", err: fmt.Errorf("ent: validator failed for field \"power_num\": %w", err)}
		}
	}
	if v, ok := ubruo.mutation.TotalDay(); ok {
		if err := userbuyrecord.TotalDayValidator(v); err != nil {
			return &ValidationError{Name: "total_day", err: fmt.Errorf("ent: validator failed for field \"total_day\": %w", err)}
		}
	}
	if v, ok := ubruo.mutation.RemainDay(); ok {
		if err := userbuyrecord.RemainDayValidator(v); err != nil {
			return &ValidationError{Name: "remain_day", err: fmt.Errorf("ent: validator failed for field \"remain_day\": %w", err)}
		}
	}
	if v, ok := ubruo.mutation.Node(); ok {
		if err := userbuyrecord.NodeValidator(v); err != nil {
			return &ValidationError{Name: "node", err: fmt.Errorf("ent: validator failed for field \"node\": %w", err)}
		}
	}
	if v, ok := ubruo.mutation.BuyDate(); ok {
		if err := userbuyrecord.BuyDateValidator(v); err != nil {
			return &ValidationError{Name: "buy_date", err: fmt.Errorf("ent: validator failed for field \"buy_date\": %w", err)}
		}
	}
	return nil
}

func (ubruo *UserBuyRecordUpdateOne) sqlSave(ctx context.Context) (_node *UserBuyRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userbuyrecord.Table,
			Columns: userbuyrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userbuyrecord.FieldID,
			},
		},
	}
	id, ok := ubruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserBuyRecord.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := ubruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ubruo.mutation.Power(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldPower,
		})
	}
	if value, ok := ubruo.mutation.AddedPower(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldPower,
		})
	}
	if value, ok := ubruo.mutation.PowerNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldPowerNum,
		})
	}
	if value, ok := ubruo.mutation.AddedPowerNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldPowerNum,
		})
	}
	if value, ok := ubruo.mutation.TotalPower(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbuyrecord.FieldTotalPower,
		})
	}
	if value, ok := ubruo.mutation.AddedTotalPower(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbuyrecord.FieldTotalPower,
		})
	}
	if value, ok := ubruo.mutation.TotalDay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldTotalDay,
		})
	}
	if value, ok := ubruo.mutation.AddedTotalDay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldTotalDay,
		})
	}
	if value, ok := ubruo.mutation.RemainDay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldRemainDay,
		})
	}
	if value, ok := ubruo.mutation.AddedRemainDay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userbuyrecord.FieldRemainDay,
		})
	}
	if value, ok := ubruo.mutation.Node(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbuyrecord.FieldNode,
		})
	}
	if value, ok := ubruo.mutation.UsedUsdt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbuyrecord.FieldUsedUsdt,
		})
	}
	if value, ok := ubruo.mutation.AddedUsedUsdt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: userbuyrecord.FieldUsedUsdt,
		})
	}
	if value, ok := ubruo.mutation.BuyDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userbuyrecord.FieldBuyDate,
		})
	}
	if value, ok := ubruo.mutation.Updated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userbuyrecord.FieldUpdated,
		})
	}
	if value, ok := ubruo.mutation.AddedUpdated(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userbuyrecord.FieldUpdated,
		})
	}
	if value, ok := ubruo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userbuyrecord.FieldDeleted,
		})
	}
	if value, ok := ubruo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: userbuyrecord.FieldDeleted,
		})
	}
	if ubruo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbuyrecord.OwnerTable,
			Columns: []string{userbuyrecord.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ubruo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbuyrecord.OwnerTable,
			Columns: []string{userbuyrecord.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserBuyRecord{config: ubruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ubruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userbuyrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
