// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"sqlent/ent/user"
	"sqlent/ent/usercount"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// UserCount is the model entity for the UserCount schema.
type UserCount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SelfBuy holds the value of the "self_buy" field.
	SelfBuy float64 `json:"self_buy,omitempty"`
	// InviteBuy holds the value of the "invite_buy" field.
	InviteBuy float64 `json:"invite_buy,omitempty"`
	// Level holds the value of the "level" field.
	Level int `json:"level,omitempty"`
	// Created holds the value of the "created" field.
	Created int64 `json:"created,omitempty"`
	// Updated holds the value of the "updated" field.
	Updated int64 `json:"updated,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted int64 `json:"deleted,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserCountQuery when eager-loading is set.
	Edges   UserCountEdges `json:"edges"`
	user_id *int64
}

// UserCountEdges holds the relations/edges for other nodes in the graph.
type UserCountEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserCountEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserCount) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case usercount.FieldSelfBuy, usercount.FieldInviteBuy:
			values[i] = &sql.NullFloat64{}
		case usercount.FieldID, usercount.FieldLevel, usercount.FieldCreated, usercount.FieldUpdated, usercount.FieldDeleted:
			values[i] = &sql.NullInt64{}
		case usercount.ForeignKeys[0]: // user_id
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserCount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserCount fields.
func (uc *UserCount) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usercount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uc.ID = int(value.Int64)
		case usercount.FieldSelfBuy:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field self_buy", values[i])
			} else if value.Valid {
				uc.SelfBuy = value.Float64
			}
		case usercount.FieldInviteBuy:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field invite_buy", values[i])
			} else if value.Valid {
				uc.InviteBuy = value.Float64
			}
		case usercount.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				uc.Level = int(value.Int64)
			}
		case usercount.FieldCreated:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created", values[i])
			} else if value.Valid {
				uc.Created = value.Int64
			}
		case usercount.FieldUpdated:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated", values[i])
			} else if value.Valid {
				uc.Updated = value.Int64
			}
		case usercount.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				uc.Deleted = value.Int64
			}
		case usercount.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_id", value)
			} else if value.Valid {
				uc.user_id = new(int64)
				*uc.user_id = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the UserCount entity.
func (uc *UserCount) QueryOwner() *UserQuery {
	return (&UserCountClient{config: uc.config}).QueryOwner(uc)
}

// Update returns a builder for updating this UserCount.
// Note that you need to call UserCount.Unwrap() before calling this method if this UserCount
// was returned from a transaction, and the transaction was committed or rolled back.
func (uc *UserCount) Update() *UserCountUpdateOne {
	return (&UserCountClient{config: uc.config}).UpdateOne(uc)
}

// Unwrap unwraps the UserCount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uc *UserCount) Unwrap() *UserCount {
	tx, ok := uc.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserCount is not a transactional entity")
	}
	uc.config.driver = tx.drv
	return uc
}

// String implements the fmt.Stringer.
func (uc *UserCount) String() string {
	var builder strings.Builder
	builder.WriteString("UserCount(")
	builder.WriteString(fmt.Sprintf("id=%v", uc.ID))
	builder.WriteString(", self_buy=")
	builder.WriteString(fmt.Sprintf("%v", uc.SelfBuy))
	builder.WriteString(", invite_buy=")
	builder.WriteString(fmt.Sprintf("%v", uc.InviteBuy))
	builder.WriteString(", level=")
	builder.WriteString(fmt.Sprintf("%v", uc.Level))
	builder.WriteString(", created=")
	builder.WriteString(fmt.Sprintf("%v", uc.Created))
	builder.WriteString(", updated=")
	builder.WriteString(fmt.Sprintf("%v", uc.Updated))
	builder.WriteString(", deleted=")
	builder.WriteString(fmt.Sprintf("%v", uc.Deleted))
	builder.WriteByte(')')
	return builder.String()
}

// UserCounts is a parsable slice of UserCount.
type UserCounts []*UserCount

func (uc UserCounts) config(cfg config) {
	for _i := range uc {
		uc[_i].config = cfg
	}
}
