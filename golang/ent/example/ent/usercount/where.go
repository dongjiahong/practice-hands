// Code generated by entc, DO NOT EDIT.

package usercount

import (
	"sqlent/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SelfBuy applies equality check predicate on the "self_buy" field. It's identical to SelfBuyEQ.
func SelfBuy(v float64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfBuy), v))
	})
}

// InviteBuy applies equality check predicate on the "invite_buy" field. It's identical to InviteBuyEQ.
func InviteBuy(v float64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInviteBuy), v))
	})
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreated), v))
	})
}

// Updated applies equality check predicate on the "updated" field. It's identical to UpdatedEQ.
func Updated(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdated), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// SelfBuyEQ applies the EQ predicate on the "self_buy" field.
func SelfBuyEQ(v float64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfBuy), v))
	})
}

// SelfBuyNEQ applies the NEQ predicate on the "self_buy" field.
func SelfBuyNEQ(v float64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSelfBuy), v))
	})
}

// SelfBuyIn applies the In predicate on the "self_buy" field.
func SelfBuyIn(vs ...float64) predicate.UserCount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSelfBuy), v...))
	})
}

// SelfBuyNotIn applies the NotIn predicate on the "self_buy" field.
func SelfBuyNotIn(vs ...float64) predicate.UserCount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSelfBuy), v...))
	})
}

// SelfBuyGT applies the GT predicate on the "self_buy" field.
func SelfBuyGT(v float64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSelfBuy), v))
	})
}

// SelfBuyGTE applies the GTE predicate on the "self_buy" field.
func SelfBuyGTE(v float64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSelfBuy), v))
	})
}

// SelfBuyLT applies the LT predicate on the "self_buy" field.
func SelfBuyLT(v float64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSelfBuy), v))
	})
}

// SelfBuyLTE applies the LTE predicate on the "self_buy" field.
func SelfBuyLTE(v float64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSelfBuy), v))
	})
}

// InviteBuyEQ applies the EQ predicate on the "invite_buy" field.
func InviteBuyEQ(v float64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInviteBuy), v))
	})
}

// InviteBuyNEQ applies the NEQ predicate on the "invite_buy" field.
func InviteBuyNEQ(v float64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInviteBuy), v))
	})
}

// InviteBuyIn applies the In predicate on the "invite_buy" field.
func InviteBuyIn(vs ...float64) predicate.UserCount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInviteBuy), v...))
	})
}

// InviteBuyNotIn applies the NotIn predicate on the "invite_buy" field.
func InviteBuyNotIn(vs ...float64) predicate.UserCount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInviteBuy), v...))
	})
}

// InviteBuyGT applies the GT predicate on the "invite_buy" field.
func InviteBuyGT(v float64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInviteBuy), v))
	})
}

// InviteBuyGTE applies the GTE predicate on the "invite_buy" field.
func InviteBuyGTE(v float64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInviteBuy), v))
	})
}

// InviteBuyLT applies the LT predicate on the "invite_buy" field.
func InviteBuyLT(v float64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInviteBuy), v))
	})
}

// InviteBuyLTE applies the LTE predicate on the "invite_buy" field.
func InviteBuyLTE(v float64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInviteBuy), v))
	})
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLevel), v))
	})
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int) predicate.UserCount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLevel), v...))
	})
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int) predicate.UserCount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLevel), v...))
	})
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLevel), v))
	})
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLevel), v))
	})
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLevel), v))
	})
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLevel), v))
	})
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreated), v))
	})
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreated), v))
	})
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...int64) predicate.UserCount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreated), v...))
	})
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...int64) predicate.UserCount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreated), v...))
	})
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreated), v))
	})
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreated), v))
	})
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreated), v))
	})
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreated), v))
	})
}

// UpdatedEQ applies the EQ predicate on the "updated" field.
func UpdatedEQ(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdated), v))
	})
}

// UpdatedNEQ applies the NEQ predicate on the "updated" field.
func UpdatedNEQ(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdated), v))
	})
}

// UpdatedIn applies the In predicate on the "updated" field.
func UpdatedIn(vs ...int64) predicate.UserCount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdated), v...))
	})
}

// UpdatedNotIn applies the NotIn predicate on the "updated" field.
func UpdatedNotIn(vs ...int64) predicate.UserCount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdated), v...))
	})
}

// UpdatedGT applies the GT predicate on the "updated" field.
func UpdatedGT(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdated), v))
	})
}

// UpdatedGTE applies the GTE predicate on the "updated" field.
func UpdatedGTE(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdated), v))
	})
}

// UpdatedLT applies the LT predicate on the "updated" field.
func UpdatedLT(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdated), v))
	})
}

// UpdatedLTE applies the LTE predicate on the "updated" field.
func UpdatedLTE(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdated), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int64) predicate.UserCount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleted), v...))
	})
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int64) predicate.UserCount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserCount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleted), v...))
	})
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleted), v))
	})
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleted), v))
	})
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleted), v))
	})
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int64) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleted), v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserCount) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserCount) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserCount) predicate.UserCount {
	return predicate.UserCount(func(s *sql.Selector) {
		p(s.Not())
	})
}
