// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sqlent/ent/user"
	"sqlent/ent/usercount"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCountCreate is the builder for creating a UserCount entity.
type UserCountCreate struct {
	config
	mutation *UserCountMutation
	hooks    []Hook
}

// SetSelfBuy sets the "self_buy" field.
func (ucc *UserCountCreate) SetSelfBuy(f float64) *UserCountCreate {
	ucc.mutation.SetSelfBuy(f)
	return ucc
}

// SetNillableSelfBuy sets the "self_buy" field if the given value is not nil.
func (ucc *UserCountCreate) SetNillableSelfBuy(f *float64) *UserCountCreate {
	if f != nil {
		ucc.SetSelfBuy(*f)
	}
	return ucc
}

// SetInviteBuy sets the "invite_buy" field.
func (ucc *UserCountCreate) SetInviteBuy(f float64) *UserCountCreate {
	ucc.mutation.SetInviteBuy(f)
	return ucc
}

// SetNillableInviteBuy sets the "invite_buy" field if the given value is not nil.
func (ucc *UserCountCreate) SetNillableInviteBuy(f *float64) *UserCountCreate {
	if f != nil {
		ucc.SetInviteBuy(*f)
	}
	return ucc
}

// SetLevel sets the "level" field.
func (ucc *UserCountCreate) SetLevel(i int) *UserCountCreate {
	ucc.mutation.SetLevel(i)
	return ucc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (ucc *UserCountCreate) SetNillableLevel(i *int) *UserCountCreate {
	if i != nil {
		ucc.SetLevel(*i)
	}
	return ucc
}

// SetCreated sets the "created" field.
func (ucc *UserCountCreate) SetCreated(i int64) *UserCountCreate {
	ucc.mutation.SetCreated(i)
	return ucc
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (ucc *UserCountCreate) SetNillableCreated(i *int64) *UserCountCreate {
	if i != nil {
		ucc.SetCreated(*i)
	}
	return ucc
}

// SetUpdated sets the "updated" field.
func (ucc *UserCountCreate) SetUpdated(i int64) *UserCountCreate {
	ucc.mutation.SetUpdated(i)
	return ucc
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (ucc *UserCountCreate) SetNillableUpdated(i *int64) *UserCountCreate {
	if i != nil {
		ucc.SetUpdated(*i)
	}
	return ucc
}

// SetDeleted sets the "deleted" field.
func (ucc *UserCountCreate) SetDeleted(i int64) *UserCountCreate {
	ucc.mutation.SetDeleted(i)
	return ucc
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (ucc *UserCountCreate) SetNillableDeleted(i *int64) *UserCountCreate {
	if i != nil {
		ucc.SetDeleted(*i)
	}
	return ucc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ucc *UserCountCreate) SetOwnerID(id int64) *UserCountCreate {
	ucc.mutation.SetOwnerID(id)
	return ucc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ucc *UserCountCreate) SetNillableOwnerID(id *int64) *UserCountCreate {
	if id != nil {
		ucc = ucc.SetOwnerID(*id)
	}
	return ucc
}

// SetOwner sets the "owner" edge to the User entity.
func (ucc *UserCountCreate) SetOwner(u *User) *UserCountCreate {
	return ucc.SetOwnerID(u.ID)
}

// Mutation returns the UserCountMutation object of the builder.
func (ucc *UserCountCreate) Mutation() *UserCountMutation {
	return ucc.mutation
}

// Save creates the UserCount in the database.
func (ucc *UserCountCreate) Save(ctx context.Context) (*UserCount, error) {
	var (
		err  error
		node *UserCount
	)
	ucc.defaults()
	if len(ucc.hooks) == 0 {
		if err = ucc.check(); err != nil {
			return nil, err
		}
		node, err = ucc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserCountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ucc.check(); err != nil {
				return nil, err
			}
			ucc.mutation = mutation
			node, err = ucc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ucc.hooks) - 1; i >= 0; i-- {
			mut = ucc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ucc *UserCountCreate) SaveX(ctx context.Context) *UserCount {
	v, err := ucc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ucc *UserCountCreate) defaults() {
	if _, ok := ucc.mutation.SelfBuy(); !ok {
		v := usercount.DefaultSelfBuy
		ucc.mutation.SetSelfBuy(v)
	}
	if _, ok := ucc.mutation.InviteBuy(); !ok {
		v := usercount.DefaultInviteBuy
		ucc.mutation.SetInviteBuy(v)
	}
	if _, ok := ucc.mutation.Level(); !ok {
		v := usercount.DefaultLevel
		ucc.mutation.SetLevel(v)
	}
	if _, ok := ucc.mutation.Created(); !ok {
		v := usercount.DefaultCreated
		ucc.mutation.SetCreated(v)
	}
	if _, ok := ucc.mutation.Updated(); !ok {
		v := usercount.DefaultUpdated
		ucc.mutation.SetUpdated(v)
	}
	if _, ok := ucc.mutation.Deleted(); !ok {
		v := usercount.DefaultDeleted
		ucc.mutation.SetDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucc *UserCountCreate) check() error {
	if _, ok := ucc.mutation.SelfBuy(); !ok {
		return &ValidationError{Name: "self_buy", err: errors.New("ent: missing required field \"self_buy\"")}
	}
	if _, ok := ucc.mutation.InviteBuy(); !ok {
		return &ValidationError{Name: "invite_buy", err: errors.New("ent: missing required field \"invite_buy\"")}
	}
	if _, ok := ucc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New("ent: missing required field \"level\"")}
	}
	if _, ok := ucc.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New("ent: missing required field \"created\"")}
	}
	if _, ok := ucc.mutation.Updated(); !ok {
		return &ValidationError{Name: "updated", err: errors.New("ent: missing required field \"updated\"")}
	}
	if _, ok := ucc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New("ent: missing required field \"deleted\"")}
	}
	return nil
}

func (ucc *UserCountCreate) sqlSave(ctx context.Context) (*UserCount, error) {
	_node, _spec := ucc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ucc *UserCountCreate) createSpec() (*UserCount, *sqlgraph.CreateSpec) {
	var (
		_node = &UserCount{config: ucc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: usercount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usercount.FieldID,
			},
		}
	)
	if value, ok := ucc.mutation.SelfBuy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercount.FieldSelfBuy,
		})
		_node.SelfBuy = value
	}
	if value, ok := ucc.mutation.InviteBuy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercount.FieldInviteBuy,
		})
		_node.InviteBuy = value
	}
	if value, ok := ucc.mutation.Level(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usercount.FieldLevel,
		})
		_node.Level = value
	}
	if value, ok := ucc.mutation.Created(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usercount.FieldCreated,
		})
		_node.Created = value
	}
	if value, ok := ucc.mutation.Updated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usercount.FieldUpdated,
		})
		_node.Updated = value
	}
	if value, ok := ucc.mutation.Deleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usercount.FieldDeleted,
		})
		_node.Deleted = value
	}
	if nodes := ucc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usercount.OwnerTable,
			Columns: []string{usercount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCountCreateBulk is the builder for creating many UserCount entities in bulk.
type UserCountCreateBulk struct {
	config
	builders []*UserCountCreate
}

// Save creates the UserCount entities in the database.
func (uccb *UserCountCreateBulk) Save(ctx context.Context) ([]*UserCount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(uccb.builders))
	nodes := make([]*UserCount, len(uccb.builders))
	mutators := make([]Mutator, len(uccb.builders))
	for i := range uccb.builders {
		func(i int, root context.Context) {
			builder := uccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserCountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uccb *UserCountCreateBulk) SaveX(ctx context.Context) []*UserCount {
	v, err := uccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
