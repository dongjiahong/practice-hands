// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sqlent/ent/predicate"
	"sqlent/ent/user"
	"sqlent/ent/usercount"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCountUpdate is the builder for updating UserCount entities.
type UserCountUpdate struct {
	config
	hooks    []Hook
	mutation *UserCountMutation
}

// Where adds a new predicate for the UserCountUpdate builder.
func (ucu *UserCountUpdate) Where(ps ...predicate.UserCount) *UserCountUpdate {
	ucu.mutation.predicates = append(ucu.mutation.predicates, ps...)
	return ucu
}

// SetSelfBuy sets the "self_buy" field.
func (ucu *UserCountUpdate) SetSelfBuy(f float64) *UserCountUpdate {
	ucu.mutation.ResetSelfBuy()
	ucu.mutation.SetSelfBuy(f)
	return ucu
}

// SetNillableSelfBuy sets the "self_buy" field if the given value is not nil.
func (ucu *UserCountUpdate) SetNillableSelfBuy(f *float64) *UserCountUpdate {
	if f != nil {
		ucu.SetSelfBuy(*f)
	}
	return ucu
}

// AddSelfBuy adds f to the "self_buy" field.
func (ucu *UserCountUpdate) AddSelfBuy(f float64) *UserCountUpdate {
	ucu.mutation.AddSelfBuy(f)
	return ucu
}

// SetInviteBuy sets the "invite_buy" field.
func (ucu *UserCountUpdate) SetInviteBuy(f float64) *UserCountUpdate {
	ucu.mutation.ResetInviteBuy()
	ucu.mutation.SetInviteBuy(f)
	return ucu
}

// SetNillableInviteBuy sets the "invite_buy" field if the given value is not nil.
func (ucu *UserCountUpdate) SetNillableInviteBuy(f *float64) *UserCountUpdate {
	if f != nil {
		ucu.SetInviteBuy(*f)
	}
	return ucu
}

// AddInviteBuy adds f to the "invite_buy" field.
func (ucu *UserCountUpdate) AddInviteBuy(f float64) *UserCountUpdate {
	ucu.mutation.AddInviteBuy(f)
	return ucu
}

// SetLevel sets the "level" field.
func (ucu *UserCountUpdate) SetLevel(i int) *UserCountUpdate {
	ucu.mutation.ResetLevel()
	ucu.mutation.SetLevel(i)
	return ucu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (ucu *UserCountUpdate) SetNillableLevel(i *int) *UserCountUpdate {
	if i != nil {
		ucu.SetLevel(*i)
	}
	return ucu
}

// AddLevel adds i to the "level" field.
func (ucu *UserCountUpdate) AddLevel(i int) *UserCountUpdate {
	ucu.mutation.AddLevel(i)
	return ucu
}

// SetUpdated sets the "updated" field.
func (ucu *UserCountUpdate) SetUpdated(i int64) *UserCountUpdate {
	ucu.mutation.ResetUpdated()
	ucu.mutation.SetUpdated(i)
	return ucu
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (ucu *UserCountUpdate) SetNillableUpdated(i *int64) *UserCountUpdate {
	if i != nil {
		ucu.SetUpdated(*i)
	}
	return ucu
}

// AddUpdated adds i to the "updated" field.
func (ucu *UserCountUpdate) AddUpdated(i int64) *UserCountUpdate {
	ucu.mutation.AddUpdated(i)
	return ucu
}

// SetDeleted sets the "deleted" field.
func (ucu *UserCountUpdate) SetDeleted(i int64) *UserCountUpdate {
	ucu.mutation.ResetDeleted()
	ucu.mutation.SetDeleted(i)
	return ucu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (ucu *UserCountUpdate) SetNillableDeleted(i *int64) *UserCountUpdate {
	if i != nil {
		ucu.SetDeleted(*i)
	}
	return ucu
}

// AddDeleted adds i to the "deleted" field.
func (ucu *UserCountUpdate) AddDeleted(i int64) *UserCountUpdate {
	ucu.mutation.AddDeleted(i)
	return ucu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ucu *UserCountUpdate) SetOwnerID(id int64) *UserCountUpdate {
	ucu.mutation.SetOwnerID(id)
	return ucu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ucu *UserCountUpdate) SetNillableOwnerID(id *int64) *UserCountUpdate {
	if id != nil {
		ucu = ucu.SetOwnerID(*id)
	}
	return ucu
}

// SetOwner sets the "owner" edge to the User entity.
func (ucu *UserCountUpdate) SetOwner(u *User) *UserCountUpdate {
	return ucu.SetOwnerID(u.ID)
}

// Mutation returns the UserCountMutation object of the builder.
func (ucu *UserCountUpdate) Mutation() *UserCountMutation {
	return ucu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ucu *UserCountUpdate) ClearOwner() *UserCountUpdate {
	ucu.mutation.ClearOwner()
	return ucu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucu *UserCountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ucu.hooks) == 0 {
		affected, err = ucu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserCountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ucu.mutation = mutation
			affected, err = ucu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ucu.hooks) - 1; i >= 0; i-- {
			mut = ucu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ucu *UserCountUpdate) SaveX(ctx context.Context) int {
	affected, err := ucu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucu *UserCountUpdate) Exec(ctx context.Context) error {
	_, err := ucu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucu *UserCountUpdate) ExecX(ctx context.Context) {
	if err := ucu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucu *UserCountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usercount.Table,
			Columns: usercount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usercount.FieldID,
			},
		},
	}
	if ps := ucu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucu.mutation.SelfBuy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercount.FieldSelfBuy,
		})
	}
	if value, ok := ucu.mutation.AddedSelfBuy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercount.FieldSelfBuy,
		})
	}
	if value, ok := ucu.mutation.InviteBuy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercount.FieldInviteBuy,
		})
	}
	if value, ok := ucu.mutation.AddedInviteBuy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercount.FieldInviteBuy,
		})
	}
	if value, ok := ucu.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usercount.FieldLevel,
		})
	}
	if value, ok := ucu.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usercount.FieldLevel,
		})
	}
	if value, ok := ucu.mutation.Updated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usercount.FieldUpdated,
		})
	}
	if value, ok := ucu.mutation.AddedUpdated(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usercount.FieldUpdated,
		})
	}
	if value, ok := ucu.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usercount.FieldDeleted,
		})
	}
	if value, ok := ucu.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usercount.FieldDeleted,
		})
	}
	if ucu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usercount.OwnerTable,
			Columns: []string{usercount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usercount.OwnerTable,
			Columns: []string{usercount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercount.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserCountUpdateOne is the builder for updating a single UserCount entity.
type UserCountUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserCountMutation
}

// SetSelfBuy sets the "self_buy" field.
func (ucuo *UserCountUpdateOne) SetSelfBuy(f float64) *UserCountUpdateOne {
	ucuo.mutation.ResetSelfBuy()
	ucuo.mutation.SetSelfBuy(f)
	return ucuo
}

// SetNillableSelfBuy sets the "self_buy" field if the given value is not nil.
func (ucuo *UserCountUpdateOne) SetNillableSelfBuy(f *float64) *UserCountUpdateOne {
	if f != nil {
		ucuo.SetSelfBuy(*f)
	}
	return ucuo
}

// AddSelfBuy adds f to the "self_buy" field.
func (ucuo *UserCountUpdateOne) AddSelfBuy(f float64) *UserCountUpdateOne {
	ucuo.mutation.AddSelfBuy(f)
	return ucuo
}

// SetInviteBuy sets the "invite_buy" field.
func (ucuo *UserCountUpdateOne) SetInviteBuy(f float64) *UserCountUpdateOne {
	ucuo.mutation.ResetInviteBuy()
	ucuo.mutation.SetInviteBuy(f)
	return ucuo
}

// SetNillableInviteBuy sets the "invite_buy" field if the given value is not nil.
func (ucuo *UserCountUpdateOne) SetNillableInviteBuy(f *float64) *UserCountUpdateOne {
	if f != nil {
		ucuo.SetInviteBuy(*f)
	}
	return ucuo
}

// AddInviteBuy adds f to the "invite_buy" field.
func (ucuo *UserCountUpdateOne) AddInviteBuy(f float64) *UserCountUpdateOne {
	ucuo.mutation.AddInviteBuy(f)
	return ucuo
}

// SetLevel sets the "level" field.
func (ucuo *UserCountUpdateOne) SetLevel(i int) *UserCountUpdateOne {
	ucuo.mutation.ResetLevel()
	ucuo.mutation.SetLevel(i)
	return ucuo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (ucuo *UserCountUpdateOne) SetNillableLevel(i *int) *UserCountUpdateOne {
	if i != nil {
		ucuo.SetLevel(*i)
	}
	return ucuo
}

// AddLevel adds i to the "level" field.
func (ucuo *UserCountUpdateOne) AddLevel(i int) *UserCountUpdateOne {
	ucuo.mutation.AddLevel(i)
	return ucuo
}

// SetUpdated sets the "updated" field.
func (ucuo *UserCountUpdateOne) SetUpdated(i int64) *UserCountUpdateOne {
	ucuo.mutation.ResetUpdated()
	ucuo.mutation.SetUpdated(i)
	return ucuo
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (ucuo *UserCountUpdateOne) SetNillableUpdated(i *int64) *UserCountUpdateOne {
	if i != nil {
		ucuo.SetUpdated(*i)
	}
	return ucuo
}

// AddUpdated adds i to the "updated" field.
func (ucuo *UserCountUpdateOne) AddUpdated(i int64) *UserCountUpdateOne {
	ucuo.mutation.AddUpdated(i)
	return ucuo
}

// SetDeleted sets the "deleted" field.
func (ucuo *UserCountUpdateOne) SetDeleted(i int64) *UserCountUpdateOne {
	ucuo.mutation.ResetDeleted()
	ucuo.mutation.SetDeleted(i)
	return ucuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (ucuo *UserCountUpdateOne) SetNillableDeleted(i *int64) *UserCountUpdateOne {
	if i != nil {
		ucuo.SetDeleted(*i)
	}
	return ucuo
}

// AddDeleted adds i to the "deleted" field.
func (ucuo *UserCountUpdateOne) AddDeleted(i int64) *UserCountUpdateOne {
	ucuo.mutation.AddDeleted(i)
	return ucuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ucuo *UserCountUpdateOne) SetOwnerID(id int64) *UserCountUpdateOne {
	ucuo.mutation.SetOwnerID(id)
	return ucuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ucuo *UserCountUpdateOne) SetNillableOwnerID(id *int64) *UserCountUpdateOne {
	if id != nil {
		ucuo = ucuo.SetOwnerID(*id)
	}
	return ucuo
}

// SetOwner sets the "owner" edge to the User entity.
func (ucuo *UserCountUpdateOne) SetOwner(u *User) *UserCountUpdateOne {
	return ucuo.SetOwnerID(u.ID)
}

// Mutation returns the UserCountMutation object of the builder.
func (ucuo *UserCountUpdateOne) Mutation() *UserCountMutation {
	return ucuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ucuo *UserCountUpdateOne) ClearOwner() *UserCountUpdateOne {
	ucuo.mutation.ClearOwner()
	return ucuo
}

// Save executes the query and returns the updated UserCount entity.
func (ucuo *UserCountUpdateOne) Save(ctx context.Context) (*UserCount, error) {
	var (
		err  error
		node *UserCount
	)
	if len(ucuo.hooks) == 0 {
		node, err = ucuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserCountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ucuo.mutation = mutation
			node, err = ucuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ucuo.hooks) - 1; i >= 0; i-- {
			mut = ucuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ucuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ucuo *UserCountUpdateOne) SaveX(ctx context.Context) *UserCount {
	node, err := ucuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucuo *UserCountUpdateOne) Exec(ctx context.Context) error {
	_, err := ucuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucuo *UserCountUpdateOne) ExecX(ctx context.Context) {
	if err := ucuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ucuo *UserCountUpdateOne) sqlSave(ctx context.Context) (_node *UserCount, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usercount.Table,
			Columns: usercount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usercount.FieldID,
			},
		},
	}
	id, ok := ucuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserCount.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := ucuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucuo.mutation.SelfBuy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercount.FieldSelfBuy,
		})
	}
	if value, ok := ucuo.mutation.AddedSelfBuy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercount.FieldSelfBuy,
		})
	}
	if value, ok := ucuo.mutation.InviteBuy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercount.FieldInviteBuy,
		})
	}
	if value, ok := ucuo.mutation.AddedInviteBuy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: usercount.FieldInviteBuy,
		})
	}
	if value, ok := ucuo.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usercount.FieldLevel,
		})
	}
	if value, ok := ucuo.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usercount.FieldLevel,
		})
	}
	if value, ok := ucuo.mutation.Updated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usercount.FieldUpdated,
		})
	}
	if value, ok := ucuo.mutation.AddedUpdated(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usercount.FieldUpdated,
		})
	}
	if value, ok := ucuo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usercount.FieldDeleted,
		})
	}
	if value, ok := ucuo.mutation.AddedDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: usercount.FieldDeleted,
		})
	}
	if ucuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usercount.OwnerTable,
			Columns: []string{usercount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usercount.OwnerTable,
			Columns: []string{usercount.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserCount{config: ucuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercount.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
